#LootBagRPG
#Text-Based MVP
from character import Hero, Enemy
from loot_bag import LootBag
from inventory import Inventory
import os
from items import Item
from shop import Shop
from saveload import *
from help_messages import *

def settings_menu(options_list: list = None) -> list:
    if options_list is None:
        options_list = [True, True]
    os.system("cls")
    print("Settings:")
    print(f"[1] AutoEncounter")
    print(f"[2] AutoPickup")
    print(f"[3] Main Menu")
    menu_option = input("Please Select An Option... ")
    if menu_option in ["1"]:
        os.system("cls")
        print("AutoEncounter Settings:")
        print(f"[1] AutoEncounter On: The next enemy is automatically generated by pressing <ENTER> after an enemy is killed.")
        print(f"[2] AutoEncounter Off: The next enemy must be manually encountered after an enemy is killed.")
        menu_option = input("Please Select An Option... ")
        auto_encounter = True if menu_option in ["1"] else False
        print(f"AutoPickup: {auto_encounter}")
        options_list[0] = auto_encounter
        settings_menu(options_list)
    elif menu_option in ["2"]:
        os.system("cls")
        print("AutoPickup Settings:")
        print(f"[1] AutoPickup On: Items will automatically be picked up by pressing <ENTER> after an enemy is killed.")
        print(f"[2] AutoPickup Off: Items must be manually picked up after an enemy is killed.")
        menu_option = input("Please Select An Option... ")
        auto_pickup = True if menu_option in ["1"] else False
        print(f"AutoPickup: {auto_pickup}")
        options_list[1] = auto_pickup
        settings_menu(options_list)
    elif menu_option in ["3"]:
        main_menu(options_list)

def main_menu(options_list: list = None) -> list:
    if options_list is None:
        options_list = [True, True]
    os.system("cls")
    print(f"Welcome To Lootbag RPG!")
    print(f"____________________________")
    print(f"Main Menu")
    print(f"[1] Play")
    print(f"[2] Settings")
    print(f"[3] Exit")
    menu_option = input("Please Select An Option... ")
    if menu_option in ["1"]:
        return options_list
    elif menu_option in ["2"]:
        settings_menu(options_list)
    elif menu_option in ["3"]:
        exit()

def option_menu(options: list, auto_option: str = None) -> str:
    print(f"___________________________")
    print(f"OPTIONS: ")
    for i, option in enumerate(options):
        print(f"[{i+1}] {option}")
    if auto_option:
        print(f"...or press <ENTER> to {auto_option}")
    print(f"___________________________")
    action_input = input("Please Select An Option... ").strip().lower()
    if action_input == "":
        return action_input
    try:
        action_input = int(action_input)
    except Exception as e:
        print(f"Command not Recognized. Please Choose a Valid Option.")
        option_menu(options, auto_option)
    action_input -= 1
    return action_input

def inventory_menu() -> None:
    game_state["menu"] = "inventory"
    hero.inventory.draw(hero)
    #Provide options for:
    #Move
    #drop
    #inspect
    #lootbag
    #character
    #exit(attack)

def lootbag_menu() -> None:
    game_state["menu"] = "lootbag"
    hero.loot_bag.draw_bag()
    #Provide options for:
    #Move
    #drop
    #inspect
    #inventory
    #character
    #exit(attack)

def inspect_menu() -> None:
    #Options:
    #Enemy
    #Item in Inventory
    #Item in Lootbag
    #exit(attack)
    options = ["Enemy", "Item in Inventory", "Item in Lootbag"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)

    if action_input == 0:
        game_state["menu"] = "inspect_enemy"
        hero.inspect(Enemy.active_enemy)
    elif action_input == 1:
        #Inspect item in inventory, list all items
        options = hero.inventory.get_items()
        action_input = option_menu(options)
        item_to_inspect = options[action_input]
        hero.inspect(item_to_inspect)
    elif action_input == 2:
        #Inspect item in lootbag, list all items
        options = hero.loot_bag.get_items()
        action_input = option_menu(options)
        item_to_inspect = options[action_input]
        hero.inspect(item_to_inspect)
    elif action_input == "":
        return

def character_menu() -> None:
    #Options:
    #Inventory
    #Lootbag
    #Heal
    #Use
    #exit(attack)
    game_state["menu"] = "character"
    hero.health_bar.draw()
    hero.mana_bar.draw()
    hero.draw_stats()
    return

def shop_menu() -> None:
    pass

def heal_menu() -> None:
    pass

#Startup, Main Menu
#Settings
options_list = main_menu()
os.system("cls")
print(f"Welcome To Lootbag RPG!")
print(f"____________________________")
username = input("Please enter your username: ")
os.system("cls")
print(f"Welcome To Lootbag RPG!")
print(f"____________________________")
print(f"The Game About Hitting Things With Your Lootbag.")
print(f"This is a text-adventure, turn-based ARPG.")
print(f"Type 'help' for help.")
print(f"If you encounter issues or a crash, feel free to file an issue on the public github.")
input("Press Enter To Begin...")
os.system("cls")

#define player and enemy objects
loot_bag = LootBag()
shop = Shop()
hero = Hero(name=username, 
            level=1, 
            xp=0, 
            health=100, 
            mana=10, 
            attack_rating=50, 
            defense=10, 
            loot_bag=loot_bag, 
            inventory=Inventory())
Enemy.active_enemy = Enemy.spawn_enemy(hero, enemy_name="Goblin")

game_state = {
    "options_list": options_list,
    "menu": "enemy"
}

#Game loop
while True:
    
    options = ["Inventory", "Lootbag", "Inspect", "Character", "Shop", "Heal"]
    auto_option = ["Attack"]
    action_input = option_menu(options=options, auto_option=auto_option)
    os.system("cls")

    #Input choice parsing
    #"Help" and other special keywords check here
    #Convert input to int, subtract 1 to be consistent with option menu 0-indexing
    

    #Prototype execution test
    if action_input == 0:
        #Inventory menu
        inventory_menu()
    elif action_input == 1:
        #lootbag menu
        lootbag_menu()
    elif action_input == 2:
        #Inspect menu
        inspect_menu()
    elif action_input == 3:
        #Character menu
        character_menu()
    elif action_input == 4:
        #Shop menu
        shop_menu()
    elif action_input == 5:
        #Heal character
        heal_menu()

    #Input parsing
    if action_input == "":
        action = ""
        argument = None
    else:
        action_parts = action_input.split(maxsplit=1)
        action = action_parts[0]
        argument = action_parts[1] if len(action_parts) > 1 else None

    if action in ["save"]:
        hero_save = hero.to_dict()
        enemy_save = Enemy.active_enemy.to_dict()
        save_game(hero=hero_save, enemy=enemy_save, game_state=game_state)
        
    elif action in ["load"]:
        if argument:
            filename = argument
        else:
            filename = input("Save file name? ")
        hero_save, enemy_save, game_state, shop_save = load_game(filename)
        hero = None
        Enemy.active_enemy = None
        hero = Hero.from_dict(hero_save)
        Enemy.active_enemy = Enemy.from_dict(enemy_save)
        #run function to change to correct game state, refactor all actions to take place in functions
        #load_game_state(game_state)
        options_list = game_state["options_list"]

    elif action in ["debug"]:
        enemydictbefore = Enemy.active_enemy.to_dict()
        Enemy.active_enemy = None
        Enemy.active_enemy = Enemy.from_dict(enemydictbefore)
        enemydictafter = Enemy.active_enemy.to_dict()
        print("BEFORE")
        for item in enemydictbefore:
            print(f"{item}: {enemydictbefore.get(item)}")
        print("----------------")
        print("AFTER")
        for item in enemydictafter:
            print(f"{item}: {enemydictafter.get(item)}")
        if enemydictbefore == enemydictafter:
            print("YES")

    elif action in ["help", "tutorial", "action", "?"]:
        if argument is None:
            help_general()
        elif argument in ["attack"]:
            help_attack()
        elif argument in ["save"]:
            help_save_load()
        elif argument in ["load"]:
            help_save_load()
        elif argument in ["inventory"]:
            help_inventory()
        elif argument in ["lootbag"]:
            help_lootbag()
        elif argument in ["stats"]:
            help_stats()
        elif argument in ["inspect"]:
            help_inspect()
        elif argument in ["shop"]:
            help_shop()
        elif argument in ["use"]:
            help_use()
        elif argument in ["heal"]:
            help_heal()
        elif argument in ["move"]:
            help_move()
        elif argument in ["drop"]:
            help_drop()
        
    elif action in ["attack", "atk", "a", ""] and Enemy.active_enemy is not None:
        game_state["menu"] = "enemy"
        drops = hero.attack(Enemy.active_enemy)
        if drops is not None:
            hero.gain_xp(drops)
            hero.gain_gold(drops)

        if Enemy.active_enemy is not None and Enemy.active_enemy.health > 0 :
            Enemy.active_enemy.attack(hero)

        hero.health_bar.draw()
        hero.mana_bar.draw()
        if Enemy.active_enemy is not None:
            Enemy.active_enemy.health_bar.draw()

    elif (action in ["pickup"] and drops is not None and len(drops) > 2) or (action in [""] and drops is not None and len(drops) > 2 and options_list[1] == True):
        hero.pick_up(drops)
        drops = None

    elif action in ["inspect", "ins"]:
        #REMOVE
        pass

    elif action in ["c", "stats", "char", "character"]:
        #REMOVE
        pass

    elif (action in ["new", "n", "next"] and Enemy.active_enemy is None) or (Enemy.active_enemy is None and options_list[0] is True and action in [""]):
        Enemy.active_enemy = Enemy.spawn_enemy(hero)
        #remove if drops should be permanent (also refactor attack function returns)
        drops = None

    elif action in ["new", "n", "next"] and Enemy.active_enemy is not None:
        print("Already fighting an enemy!")

    elif action in ["b", "bag"]:
        #REMOVE
        pass

    elif action in ["e", "i", "inventory", "inv"]:
        #REMOVE
        pass

    elif action in ["m", "move"]:
        if argument is None:
            item_to_move = input("Which Item? ").strip().lower()
            if item_to_move in ["help"]:
                help_move()
                item_to_move = input("Which Item? ").strip().lower()
        else:
            item_to_move = argument
        destination = input("To Where? ").strip().lower()
        if destination in ["help"]:
            help_move()
            destination = input("To Where? ").strip().lower()

        if destination in ["bag", "b", "lootbag"]:
            #move from inventory to lootbag
            if (hero.loot_bag.weight < hero.loot_bag.weight_max) and hero.inventory.remove_item(item_to_move):
                hero.loot_bag.add_item(item_to_move)
            elif hero.loot_bag.weight >= hero.loot_bag.weight_max:
                print(f"{item_to_move} won't fit in your lootbag.")

        elif destination in ["e", "i", "inventory", "inv"]:
            #move from lootbag to inventory
            if (hero.inventory.weight < hero.inventory.weight_max) and hero.loot_bag.remove_item(item_to_move):
                hero.inventory.add_item(item_to_move)
            elif hero.inventory.weight >= hero.inventory.weight_max:
                print(f"{item_to_move} won't fit in your inventory.")
        else:
            print("Invalid Destination")

    elif action in ["shop", "s"]:
        game_state["menu"] = "shop"
        shop.generate_shop()
        shop.draw()
        if argument is None or argument in ["debug"]:
            buy_sell = input(f"Buying or Selling, {hero.name}? ").strip().lower()
            if buy_sell in ["help"]:
                help_shop()
                buy_sell = input(f"Buying or Selling, {hero.name}? ").strip().lower()
            if argument in ["debug"]:
                shop_dict_before = shop.to_dict()
                shop = None
                shop = Shop.from_dict(shop_dict_before)
                shop_dict_after = shop.to_dict()
                print("BEFORE")
                for item in shop_dict_before:
                    print(f"{item}: {shop_dict_before.get(item)}")
                print("----------------")
                print("AFTER")
                for item in shop_dict_after:
                    print(f"{item}: {shop_dict_after.get(item)}")
                if shop_dict_before == shop_dict_after:
                        print("YES")
                print(shop_dict_after)
        else:
            buy_sell = argument
        if buy_sell in ["b", "buy", "buying", "purchase"]:
            hero.inventory.draw(hero)
            item_to_buy = input(f"Whaddaya Buyin, {hero.name}? ").strip().lower()
            if item_to_buy in ["help"]:
                help_shop()
                item_to_buy = input(f"Whaddaya Buyin, {hero.name}? ").strip().lower()
            shop.buy(hero, item_to_buy)

        elif buy_sell in ["s", "sell", "selling"]:
            hero.inventory.draw(hero)
            item_to_sell = input(f"Whatcha got for me, {hero.name}? ").strip().lower()
            if item_to_sell in ["help"]:
                help_shop()
                item_to_sell = input(f"Whatcha got for me, {hero.name}? ").strip().lower()
            shop.sell(hero, item_to_sell)

        else:
            print("Command not Recognized.")


    elif action in ["add"]:
        if argument in ["g", "gold"]:
            hero.gold += 10
            print("Added 10 gold.")
        elif argument in ["xp"]:
            hero.gain_xp(drops=None,xp=50)
        elif argument is None:
            weapon_name = input("Which Weapon? ").strip().lower()
        else:
            weapon_name = argument
            hero.loot_bag.add_item(weapon_name)
            hero.loot_bag.draw_bag()

    elif action in ["drop", "d"]:
        if argument is None:
            item_name = input("Which Weapon? ").strip().lower()
            if item_name in ["help"]:
                help_drop()
                item_name = input("Which Weapon? ").strip().lower()
        else:
            item_name = argument
            source = input("From Where? ").strip().lower()
            if source in ["help"]:
                help_drop()
                source = input("From Where? ").strip().lower()
            if source in ["b", "bag", "lootbag"]:
                hero.loot_bag.remove_item(item_name)
                hero.loot_bag.draw_bag()
            elif source in ["e", "i", "inv", "inventory"]:
                hero.inventory.remove_item(item_name)
                hero.inventory.draw()

    elif action in ["heal", "h", "restore"]:
        hero.heal(10)
        hero.health_bar.draw()
        hero.mana_bar.draw()

    elif action in ["use", "u"]:
        
        if argument is None:
            item_to_use = input(f"What would you like to use, {hero.name}? ").strip().lower()
            if item_to_use in ["help"]:
                help_drop()
                item_to_use = input(f"What would you like to use, {hero.name}? ").strip().lower()
        else:
            item_to_use = argument
            if item_to_use in ["help"]:
                help_drop()
                item_to_use = input(f"What would you like to use, {hero.name}? ").strip().lower()
            hero.use(item_to_use)
            hero.inventory.draw(hero)

    else:
        print("Action Not Recognized")

    #if enemy.health == 0:
        #enemy = enemy.die()


    #if hero.health == 0:
        #hero.die()
        

#
