#LootBagRPG
#Text-Based MVP
from character import Hero, Enemy
from loot_bag import LootBag
from inventory import Inventory
import os
from items import Item, Weapon, Potion
from shop import Shop
from saveload import *
from help_messages import *

def settings_menu(options_list: list = None) -> list:
    if options_list is None:
        options_list = [True, True]
    os.system("cls")
    print("Settings:")
    print(f"[1] AutoEncounter")
    print(f"[2] AutoPickup")
    print(f"[3] Main Menu")
    menu_option = input("Please Select An Option... ")
    if menu_option in ["1"]:
        os.system("cls")
        print("AutoEncounter Settings:")
        print(f"[1] AutoEncounter On: The next enemy is automatically generated by pressing <ENTER> after an enemy is killed.")
        print(f"[2] AutoEncounter Off: The next enemy must be manually encountered after an enemy is killed.")
        menu_option = input("Please Select An Option... ")
        auto_encounter = True if menu_option in ["1"] else False
        print(f"AutoPickup: {auto_encounter}")
        options_list[0] = auto_encounter
        settings_menu(options_list)
    elif menu_option in ["2"]:
        os.system("cls")
        print("AutoPickup Settings:")
        print(f"[1] AutoPickup On: Items will automatically be picked up by pressing <ENTER> after an enemy is killed.")
        print(f"[2] AutoPickup Off: Items must be manually picked up after an enemy is killed.")
        menu_option = input("Please Select An Option... ")
        auto_pickup = True if menu_option in ["1"] else False
        print(f"AutoPickup: {auto_pickup}")
        options_list[1] = auto_pickup
        settings_menu(options_list)
    elif menu_option in ["3"]:
        main_menu(options_list)

def main_menu(options_list: list = None) -> list:
    if options_list is None:
        options_list = [True, True]
    os.system("cls")
    print(f"Welcome To Lootbag RPG!")
    print(f"____________________________")
    print(f"Main Menu")
    print(f"[1] Play")
    print(f"[2] Settings")
    print(f"[3] Exit")
    menu_option = input("Please Select An Option... ")
    if menu_option in ["1"]:
        return options_list
    elif menu_option in ["2"]:
        settings_menu(options_list)
    elif menu_option in ["3"]:
        exit()

def option_menu(options: list, auto_option: str = None) -> str:
    print(f"___________________________")
    print(f"OPTIONS: ")
    for i, option in enumerate(options):
        print(f"[{i+1}] {option}")
    if auto_option:
        print(f"...or press <ENTER> to {auto_option}")
    print(f"___________________________")
    action_input = input("Please Select An Option... ").strip().lower()
    if action_input == "" and auto_option:
        return action_input
    elif action_input in ["help", "h", "?"]:
        return "help"
    else:
        try:
            action_input = int(action_input)
        except Exception as e:
            print(f"Command not Recognized. Please Choose a Valid Option.")
            option_menu(options, auto_option)
        action_input -= 1
        return action_input

def inventory_menu() -> None:
    game_state["menu"] = "inventory"
    hero.inventory.draw(hero)
    #Provide options for:
    #Move
    #drop
    #inspect
    #lootbag
    #character
    #exit(attack)
    options = ["Move", "Drop", "Inspect", "Lootbag", "Character"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)
    if action_input == 0:
        move_menu()
    elif action_input == 1:
        drop_menu()
    elif action_input == 2:
        inspect_menu()
    elif action_input == 3:
        lootbag_menu()
    elif action_input == 4:
        character_menu()
    elif action_input == "":
        return

def lootbag_menu() -> None:
    game_state["menu"] = "lootbag"
    hero.loot_bag.draw_bag()
    #Provide options for:
    #Move
    #drop
    #inspect
    #inventory
    #character
    #exit(attack)
    options = ["Move", "Drop", "Inspect", "Inventory", "Character"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)
    if action_input == 0:
        move_menu()
    elif action_input == 1:
        drop_menu()
    elif action_input == 2:
        inspect_menu()
    elif action_input == 3:
        inventory_menu()
    elif action_input == 4:
        character_menu()
    elif action_input == "":
        return

def inspect_menu() -> None:
    #Options:
    #Enemy
    #Item in Inventory
    #Item in Lootbag
    #exit(attack)
    options = ["Enemy", "Item in Inventory", "Item in Lootbag"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)

    if action_input == 0:
        game_state["menu"] = "inspect_enemy"
        hero.inspect(Enemy.active_enemy)
    elif action_input == 1:
        #Inspect item in inventory, list all items
        options = hero.inventory.get_items()
        action_input = option_menu(options)
        item_to_inspect = options[action_input]
        hero.inspect(item_to_inspect)
    elif action_input == 2:
        #Inspect item in lootbag, list all items
        options = hero.loot_bag.get_items()
        action_input = option_menu(options)
        item_to_inspect = options[action_input]
        hero.inspect(item_to_inspect)
    elif action_input == "":
        return

def character_menu() -> None:
    #Options:
    #Inventory
    #Lootbag
    #Heal
    #Use
    #exit(attack)
    game_state["menu"] = "character"
    hero.health_bar.draw()
    hero.mana_bar.draw()
    hero.draw_stats()
    options = ["Inventory", "Lootbag", "Heal", "Use"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)
    if action_input == 0:
        inventory_menu()
    elif action_input == 1:
        lootbag_menu()
    elif action_input == 2:
        heal_menu()
    elif action_input == 3:
        use_menu()
    elif action_input == "":
        return
    return

def shop_menu() -> None:
    #Options:
    #Buy
    #Sell
    #Move
    #exit(attack)
    game_state["menu"] = "shop"
    shop.generate_shop()
    shop.draw()
    options = ["Buy", "Sell", "Move"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)
    
    if action_input == 0:
        hero.inventory.draw(hero)
        options = []
        for item_name, item_obj in shop.stock.items():
            options.append(item_name)
        action_input = option_menu(options)
        item_to_buy = options[action_input]
        shop.buy(hero, item_to_buy)

    elif action_input == 1:
        hero.inventory.draw(hero)
        options = hero.inventory.get_items()
        action_input = option_menu(options)
        item_to_sell = options[action_input]
        shop.sell(hero, item_to_sell)

    elif action_input == 2:
        move_menu()

    elif action_input == "":
        return

def heal_menu() -> None:
    hero.heal(10)
    hero.health_bar.draw()
    hero.mana_bar.draw()

def move_menu() -> None:
    #Options:
    #From Inventory -> Lootbag
    #From Lootbag -> Inventory
    #exit(attack)
    options = ["Inventory -> Lootbag", "Lootbag -> Inventory"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)

    if action_input == 0:
        #move from inventory to lootbag
        options = hero.inventory.get_items()
        action_input = option_menu(options)
        item_to_move = options[action_input]
        if (hero.loot_bag.weight < hero.loot_bag.weight_max) and hero.inventory.remove_item(item_to_move):
            hero.loot_bag.add_item(item_to_move)
        elif hero.loot_bag.weight >= hero.loot_bag.weight_max:
            print(f"{item_to_move} won't fit in your lootbag.")

    elif action_input == 1:
        #move from lootbag to inventory
        options = hero.loot_bag.get_items()
        action_input = option_menu(options)
        item_to_move = options[action_input]
        if (hero.inventory.weight < hero.inventory.weight_max) and hero.loot_bag.remove_item(item_to_move):
            hero.inventory.add_item(item_to_move)
        elif hero.inventory.weight >= hero.inventory.weight_max:
            print(f"{item_to_move} won't fit in your inventory.")
    elif action_input == "":
        return
    
def drop_menu() -> None:

    options = ["From Inventory", "From Lootbag"]
    auto_option = ["Attack"]
    action_input = option_menu(options, auto_option)

    if action_input == 0:
        options = hero.inventory.get_items()
        action_input = option_menu(options)
        item_to_drop = options[action_input]
        hero.inventory.remove_item(item_to_drop)
        hero.inventory.draw()

    elif action_input == 1:
        options = hero.loot_bag.get_items()
        action_input = option_menu(options)
        item_to_drop = options[action_input]
        hero.loot_bag.remove_item(item_to_drop)
        hero.loot_bag.draw_bag()

    elif action_input == "":
        return

def use_menu() -> None:
    #Options
    #Inventory Items
    options = hero.inventory.get_items()
    action_input = option_menu(options)
    item_to_use = options[action_input]
    hero.use(item_to_use)
    hero.inventory.draw(hero)

def load_menu() -> list:
    filename = input("Save file name? ")
    hero_save, enemy_save, game_state, shop_save = load_game(filename)
    hero = None
    Enemy.active_enemy = None
    hero = Hero.from_dict(hero_save)
    enemy = Enemy.from_dict(enemy_save)
    #run function to change to correct game state, refactor all actions to take place in functions
    #load_game_state(game_state)
    options_list = game_state["options_list"]
    return hero, enemy, options_list

def save_menu() -> None:
    hero_save = hero.to_dict()
    enemy_save = Enemy.active_enemy.to_dict()
    save_game(hero=hero_save, enemy=enemy_save, game_state=game_state)

def help_menu() -> None:
    options = ["General", "Attack", "Saving/Loading", "Inventory", "Lootbag", "Stats", "Inspect", "Shop", "Use", "Heal", "Move", "Drop"]
    auto_option = ["Attack"]
    action_input = option_menu(options=options, auto_option=auto_option)

    if action_input == 0:
        help_general()
    elif action_input == 1:
        help_attack()
    elif action_input == 2:
        help_save_load()
    elif action_input == 3:
        help_inventory()
    elif action_input == 4:
        help_lootbag()
    elif action_input == 5:
        help_stats()
    elif action_input == 6:
        help_inspect()
    elif action_input == 7:
        help_shop()
    elif action_input == 8:
        help_use()
    elif action_input == 9:
        help_heal()
    elif action_input == 10:
        help_move()
    elif action_input == 11:
        help_drop()
    elif action_input == "":
        return
    help_menu()

def pickup_menu(drops) -> None:
    hero.pick_up(drops)
    drops = None

def add_menu() -> None:
    #Options:
    #Gold
    #XP
    #Item
    #exit(attack)
    options = ["Gold", "XP", "Item"]
    auto_option = ["Go Back"]
    action_input = option_menu(options, auto_option)

    if action_input == "":
        return
    if action_input == 0:
        hero.gold += 10
        print("Added 10 gold.")
    elif action_input == 1:
        hero.gain_xp(drops=None,xp=50)
    elif action_input == 2:
        options = ["Mana Potion", "Wooden Stick", "Iron Dagger"]
        action_input = option_menu(options, auto_option)
        item_to_add = options[action_input]
        if action_input == 0:
            hero.inventory.add_item(item_to_add)
        elif action_input == 1:
            weapon_to_add = Weapon.generate_weapon("Wooden Stick")
            hero.inventory.add_item(weapon_to_add.name)
        elif action_input == 2:
            weapon_to_add = Weapon.generate_weapon("Iron Dagger")
            hero.inventory.add_item(weapon_to_add.name)
        hero.inventory.draw(hero)
    add_menu()
    

def encounter_menu() -> None:
    #if autoencounter off, present options here
    #Set up autocall if autoencounter on
    Enemy.active_enemy = Enemy.spawn_enemy(hero)
    #remove if drops should be permanent (also refactor attack function returns)
    drops = None

def attack_menu() -> None:
    game_state["menu"] = "enemy"
    drops = hero.attack(Enemy.active_enemy)
    if drops is not None:
        hero.gain_xp(drops)
        hero.gain_gold(drops)
        #Call pickup_menu(drops) here if autopickup off

    if Enemy.active_enemy is not None and Enemy.active_enemy.health > 0 :
        Enemy.active_enemy.attack(hero)

    hero.health_bar.draw()
    hero.mana_bar.draw()
    if Enemy.active_enemy is not None:
        Enemy.active_enemy.health_bar.draw()

#Startup, Main Menu
#Settings
options_list = main_menu()
os.system("cls")
print(f"Welcome To Lootbag RPG!")
print(f"____________________________")
username = input("Please enter your username: ")
os.system("cls")
print(f"Welcome To Lootbag RPG!")
print(f"____________________________")
print(f"The Game About Hitting Things With Your Lootbag.")
print(f"This is a text-adventure, turn-based ARPG.")
print(f"Type 'help' for help.")
print(f"If you encounter issues or a crash, feel free to file an issue on the public github.")
input("Press Enter To Begin...")
os.system("cls")

#define player and enemy objects
loot_bag = LootBag()
shop = Shop()
hero = Hero(name=username, 
            level=1, 
            xp=0, 
            health=100, 
            mana=10, 
            attack_rating=50, 
            defense=10, 
            loot_bag=loot_bag, 
            inventory=Inventory())
Enemy.active_enemy = Enemy.spawn_enemy(hero, enemy_name="Goblin")

game_state = {
    "options_list": options_list,
    "menu": "enemy"
}

#Game loop
while True:
    
    options = ["Inventory", "Lootbag", "Inspect", "Character", "Shop", "Heal"]
    auto_option = ["Attack"]
    action_input = option_menu(options=options, auto_option=auto_option)
    os.system("cls")

    #Input choice parsing
    #"Help" and other special keywords check here
    if action_input == "help":
        help_menu()
        continue

    #Prototype execution test
    if action_input == 0:
        #Inventory menu
        inventory_menu()
    elif action_input == 1:
        #lootbag menu
        lootbag_menu()
    elif action_input == 2:
        #Inspect menu
        inspect_menu()
    elif action_input == 3:
        #Character menu
        character_menu()
    elif action_input == 4:
        #Shop menu
        shop_menu()
    elif action_input == 5:
        #Heal character
        heal_menu()
    elif action_input == 6:
        #Load menu
        hero, Enemy.active_enemy, options_list = load_menu()
    elif action_input == 7:
        #Save menu
        save_menu()
    elif action_input == "":
        #Attack
        attack_menu()
    elif action_input == -1:
        add_menu()
        
#Shop Save debug
"""
if argument in ["debug"]:
                shop_dict_before = shop.to_dict()
                shop = None
                shop = Shop.from_dict(shop_dict_before)
                shop_dict_after = shop.to_dict()
                print("BEFORE")
                for item in shop_dict_before:
                    print(f"{item}: {shop_dict_before.get(item)}")
                print("----------------")
                print("AFTER")
                for item in shop_dict_after:
                    print(f"{item}: {shop_dict_after.get(item)}")
                if shop_dict_before == shop_dict_after:
                        print("YES")
                print(shop_dict_after)
"""

#General Save Debug
"""
elif action in ["debug"]:
        enemydictbefore = Enemy.active_enemy.to_dict()
        Enemy.active_enemy = None
        Enemy.active_enemy = Enemy.from_dict(enemydictbefore)
        enemydictafter = Enemy.active_enemy.to_dict()
        print("BEFORE")
        for item in enemydictbefore:
            print(f"{item}: {enemydictbefore.get(item)}")
        print("----------------")
        print("AFTER")
        for item in enemydictafter:
            print(f"{item}: {enemydictafter.get(item)}")
        if enemydictbefore == enemydictafter:
            print("YES")
"""

#Input parsing
"""
    if action_input == "":
        action = ""
        argument = None
    else:
        action_parts = action_input.split(maxsplit=1)
        action = action_parts[0]
        argument = action_parts[1] if len(action_parts) > 1 else None
"""